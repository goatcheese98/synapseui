import { createAutoBuildingObject as z, indent as j, voidElements as D, serializeJs as F } from "@histoire/shared";
import { camelCase as N, pascalCase as E } from "../node_modules/.pnpm/change-case@5.4.4/node_modules/change-case/dist/index.js";
import { Text as J, vModelText as O, vModelSelect as G, vModelRadio as q, vModelCheckbox as H, vModelDynamic as I } from "vue";
async function v(e) {
  var _, d, y, x;
  const o = ((d = (_ = e.slots()).default) == null ? void 0 : d.call(_, { state: e.state ?? {} })) ?? [], c = Array.isArray(o) ? o : [o], m = [];
  for (const u in c) {
    const A = c[u];
    m.push(...(await k(A, (x = (y = e.state) == null ? void 0 : y._hPropState) == null ? void 0 : x[u])).lines);
  }
  return m.join(`
`);
}
async function k(e, o = null) {
  var d;
  if (e.type === J)
    return {
      // @ts-expect-error TODO
      lines: [e.children],
      isText: !0
    };
  const c = [];
  if (typeof e.type == "object" || typeof e.type == "string") {
    let y = function(t, s, i = null) {
      let n = "";
      for (const T in s.modifiers)
        s.modifiers[T] && (n += `.${T}`);
      let a = "";
      s.arg && (a = `:${s.arg}`), i && (i = i.replace(/^\$(setup|props|data)\./g, ""));
      const r = i ? [i] : U(s.value), f = [], L = `v-${t}${a}${n}="`;
      r.length > 1 ? (f.push(`${L}${r[0]}`), f.push(...r.slice(1, r.length - 1)), f.push(`${r[r.length - 1]}"`), A = !0) : f.push(`${L}${r[0] ?? ""}"`), u.push(f);
    }, x = function(t, s) {
      var i, n, a, r;
      if (typeof s != "string" || (i = e.dynamicProps) != null && i.includes(t)) {
        let f = ":";
        t.startsWith("on") && (f = "@");
        const L = f === "@" ? `${t[2].toLowerCase()}${t.slice(3)}` : t, M = [`onUpdate:${t}`, `onUpdate:${N(t)}`].find((p) => {
          var $;
          return (($ = e.dynamicProps) == null ? void 0 : $.includes(p)) || e.props && p in e.props;
        });
        if (f === ":" && M) {
          S.push(M);
          const $ = e.props[M].toString();
          let V;
          const B = /\(\$event\) => (.*?) = \$event/.exec($);
          B && (V = B[1]);
          const K = `${t === "modelValue" ? "model" : t}Modifiers`, W = e.props[K] ?? {};
          S.push(K), y("model", {
            arg: t === "modelValue" ? null : t,
            modifiers: W,
            value: s
          }, V);
          return;
        }
        if (typeof s > "u")
          return;
        let h;
        if (typeof s == "string" && s.startsWith("{{") && s.endsWith("}}"))
          h = C(s.substring(2, s.length - 2).trim()).split(`
`);
        else if (typeof s == "function") {
          let p = C(s.toString().replace(/'/g, "\\'").replace(/"/g, "'"));
          const $ = /function (\S+)\(/.exec(p);
          $ ? h = [$[1]] : (p.startsWith("($event) => ") && (p = p.substring(12)), h = p.split(`
`));
        } else
          h = U(s);
        if (h.length > 1) {
          A = !0;
          const p = [`${f}${L}="${h[0]}`];
          p.push(...h.slice(1, h.length - 1)), p.push(`${h[h.length - 1]}"`), u.push(p);
        } else
          u.push([`${f}${L}="${h[0]}"`]);
      } else ((r = (a = (n = e.type) == null ? void 0 : n.props) == null ? void 0 : a[t]) == null ? void 0 : r.type) === Boolean ? u.push([t]) : u.push([`${t}="${s}"`]);
    };
    var m = y, _ = x;
    (d = e.type) != null && d.__asyncLoader && !e.type.__asyncResolved && await e.type.__asyncLoader();
    const u = [];
    let A = !1;
    const S = [
      "key"
    ];
    if (e.dirs) {
      for (const t of e.dirs)
        if (t.dir === O || t.dir === G || t.dir === q || t.dir === H || t.dir === I) {
          const i = [`onUpdate:${t.arg ?? "modelValue"}`, `onUpdate:${N(t.arg ?? "modelValue")}`].find((r) => e.props[r]), n = e.props[i];
          let a = null;
          if (n) {
            S.push(i);
            const r = n.toString(), f = /\(\$event\) => (.*?) = \$event/.exec(r);
            f && (a = f[1]);
          }
          y("model", t, a);
        } else if (t.instance._ || t.instance.$) {
          const s = t.instance.$ ?? t.instance._;
          let i;
          for (const n of [s.directives, s.appContext.directives]) {
            for (const a in n)
              if (n[a] === t.dir) {
                i = a;
                break;
              }
            if (i) break;
          }
          if (!i) {
            for (const n in s.setupState)
              if (s.setupState[n] === t.dir) {
                i = n.replace(/^v(\w)/, (a, r) => r.toLowerCase());
                break;
              }
          }
          i && y(i, t);
        }
    }
    for (const t in e.props) {
      if (S.includes(t) || o && t in o)
        continue;
      const s = e.props[t];
      x(t, s);
    }
    if (o)
      for (const t in o)
        x(t, o[t]);
    u.length > 1 && (A = !0);
    const b = Q(e);
    let w = !1;
    const l = [];
    if (typeof e.children == "string")
      b === "pre" ? l.push(e.children) : l.push(...e.children.split(`
`)), w = !0;
    else if (Array.isArray(e.children)) {
      let t;
      for (const s of e.children) {
        const i = await k(s);
        if (i.isText) {
          t === void 0 && (t = !0);
          const n = i.lines[0];
          !l.length || /^\s/.test(n) ? l.push(n.trim()) : l[l.length - 1] += n;
        } else
          t === void 0 && (t = !1), l.push(...i.lines);
      }
      t !== void 0 && (w = t);
    }
    if (e.children && typeof e.children == "object" && !Array.isArray(e.children)) {
      for (const t in e.children)
        if (typeof e.children[t] == "function") {
          const s = z((r) => `{{ ${r} }}`, (r, f) => {
            if (f === "__v_isRef")
              return () => !1;
          }), i = e.children[t](s.proxy), n = [];
          for (const r of i)
            n.push(...(await k(r)).lines);
          const a = Object.keys(s.cache);
          a.length ? (l.push(`<template #${t}="{ ${a.join(", ")} }">`), l.push(...j(n)), l.push("</template>")) : t === "default" ? l.push(...n) : (l.push(`<template #${t}>`), l.push(...j(n)), l.push("</template>"));
        }
    }
    const g = [`<${b}`];
    if (A) {
      for (const t of u)
        g.push(...j(t));
      l.length > 0 && g.push(">");
    } else
      u.length === 1 && (g[0] += ` ${u[0]}`), l.length > 0 && (g[0] += ">");
    const R = D.includes(b.toLowerCase());
    l.length > 0 ? l.length === 1 && g.length === 1 && !u.length && w ? c.push(`${g[0]}${l[0]}</${b}>`) : (c.push(...g), c.push(...j(l)), c.push(`</${b}>`)) : g.length > 1 ? (c.push(...g), c.push(R ? ">" : "/>")) : c.push(`${g[0]}${R ? "" : " /"}>`);
  } else if ((e == null ? void 0 : e.shapeFlag) & 16)
    for (const y of e.children)
      c.push(...(await k(y)).lines);
  return {
    lines: c
  };
}
function Q(e) {
  var o, c, m, _;
  if (typeof e.type == "string")
    return e.type;
  if ((o = e.type) != null && o.__asyncResolved) {
    const d = (c = e.type) == null ? void 0 : c.__asyncResolved;
    return d.name ?? P(d.__file);
  } else {
    if ((m = e.type) != null && m.name)
      return e.type.name;
    if ((_ = e.type) != null && _.__file)
      return P(e.type.__file);
  }
  return "Anonymous";
}
function P(e) {
  const o = /([^/]+)\.vue$/.exec(e);
  return o ? E(o[1]) : "Anonymous";
}
function U(e) {
  const o = !!(e != null && e.__autoBuildingObject), c = F(e);
  return o ? [C(c.__autoBuildingObjectGetKey)] : C(c).split(`
`);
}
function C(e) {
  return e.replace(/\$setup\./g, "");
}
export {
  v as generateSourceCode,
  Q as getTagName
};
